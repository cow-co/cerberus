openapi: 3.0.0
info:
  title: CERBERUS API
  description: API definition for the CERBERUS implant-management API.
  version: 2.0.0
# TODO Update with ACG stuff
components:
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
  schemas:
    logindetails:
      properties:
        username:
          type: string
        password:
          type: string
    implant:
      properties:
        _id:
          nullable: false
          type: "string"
        id:
          nullable: false
          type: "string"
        ip:
          nullable: true
          type: "string"
        os:
          nullable: true
          type: "string"
        beaconIntervalSeconds:
          nullable: false
          type: "number"
        lastCheckinTime:
          nullable: false
          type: "string"
        isActive:
          nullable: false
          type: "boolean"
    taskreq:
      properties:
        implantId:
          nullable: false
          type: "string"
        taskType:
          nullable: false
          type: "string"
        params:
          nullable: true
          type: "array"
          items:
            $ref: "#/components/schemas/paramvalue"
    taskdb:
      properties:
        _id:
          nullable: false
          type: "string"
        order:
          nullable: false
          type: "integer"
        implantId:
          nullable: false
          type: "string"
        taskType:
          nullable: false
          type: "string"
        params:
          nullable: true
          type: "array"
          items:
            $ref: "#/components/schemas/paramvalue"
        sent:
          nullable: false
          type: "boolean"
    tasktypedb:
      properties:
        _id:
          nullable: false
          type: "string"
        name:
          nullable: false
          type: "string"
        params:
          nullable: false
          type: "array"
          items:
            type: object
            properties:
              name: 
                nullable: false
                type: "string"
              type: 
                nullable: false
                type: "string"
    tasktypecreate:
      properties:
        name:
          nullable: false
          type: "string"
        params:
          nullable: false
          type: "array"
          items:
            type: object
            properties:
              name: 
                nullable: false
                type: "string"
              type: 
                nullable: false
                type: "string"
    paramvalue:
      properties:
        name:
          nullable: false
          type: "string"
        value:
          nullable: false
          type: "string"
paths:
# ACCESS
  /access/register:
    post: 
      summary: Creates a user, when user management is backed by the database (rather than AD, for example).
      security: []
      tags:
        - Users
        - Access
      requestBody:
        content:
          application/json:
            schema: 
              $ref: "#/components/schemas/logindetails"
      responses:
        "200":
          description: User registered successfully 
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
        "400":
          description: Validation error(s) 
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
        "500":
          description: Exception thrown, or cannot create users in-app with the configured auth method (eg. Active Directory)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
  /access/login:
    post: 
      summary: Logs the user in.
      security: []
      tags:
        - Users
        - Access
      requestBody:
        description: Login credentials
        content:
          application/json:
            schema: 
              $ref: "#/components/schemas/logindetails"
      responses:
        "200":
          description: User logged in successfully 
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: The bearer token to be used in future authenticated requests.
                  user:
                    type: object
                    properties:
                      id: 
                        type: string
                      name:
                        type: string
                      isAdmin:
                        type: boolean
                  errors:
                    type: array
                    items:
                      type: string
        "401":
          description: Incorrect credentials 
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
        "500":
          description: Exception thrown, or configured auth method is not supported
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
  /access/logout/{userId}:
    delete: 
      summary: Logs the user out, by invalidating all bearer tokens they possess.
      security: []
      tags:
        - Users
        - Access
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: Identifier of the user to delete.
      responses:
        "200":
          description: User logged out successfully 
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
        "500":
          description: Exception thrown
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
  /access/admin:
    put: 
      security:
        - jwt: [Admin]
      summary: Changes admin status of user. Calling user must themselves be an admin.
      tags:
        - Access
      requestBody:
        description: Details of the change to make 
        content:
          application/json:
            schema: 
              type: object
              properties:
                userId: 
                  type: string
                makeAdmin:
                  type: boolean
      responses:
        "200":
          description: User admin status successfully changed
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
        "400":
          description: Attempting to change admin status of a non-existent user
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
        "403":
          description: User not logged in or not an admin
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
        "500":
          description: Exception thrown
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
# BEACONS
  /beacon: 
    post: 
      summary: Checks in from an implant, and retrieves tasks. 
      security: []
      tags:
        - Implants
      requestBody:
        description: Details of the implant host
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: The ID of the implant
                ip:
                  type: string
                  description: The IP of the implant host
                os:
                  type: string
                  description: The OS of the implant host
                beaconIntervalSeconds:
                  type: number
                  description: The interval, in seconds, between checkins for the implant - configured in the implant code to start off, but may be updated by C2
        required: true
      responses:
        "200":
          description: Tasks for the implant
          content:
            application/json:
              schema: 
                type: object
                properties:
                  tasks:
                    type: array
                    items: 
                      $ref: "#/components/schemas/taskdb"
                  errors:
                    type: array
                    items:
                      type: string
        "400":
          description: Beacon is invalid
          content:
            application/json:
              schema: 
                type: object
                properties:
                  tasks:
                    type: array
                    items: 
                      $ref: "#/components/schemas/taskdb"
                  errors:
                    type: array
                    items:
                      type: string
        "500":
          description: Exception thrown
          content:
            application/json:
              schema: 
                type: object
                properties:
                  tasks:
                    type: array
                    items: 
                      $ref: "#/components/schemas/taskdb"
                  errors:
                    type: array
                    items:
                      type: string
# IMPLANTS
  /implants:
    get:
      security:
        - jwt: [Read]
      # TODO It should filter implants based on ACGs
      summary: Retrieves all implants.
      tags:
        - Implants
      responses:
        "200":
          description: Implant details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  implants:
                    type: array
                    items:
                      $ref: "#/components/schemas/implant"
                  errors:
                    type: array
                    items:
                      type: string
        "403":
          description: User not logged in.
          content:
            application/json:
              schema:
                type: object
                properties:
                  implants:
                    type: array
                    description: This will be empty
                    items:
                      $ref: "#/components/schemas/implant"
                  errors:
                    type: array
                    items:
                      type: string
        "500":
          description: An unexpected server-side error
          content:
            application/json:
              schema:
                type: object
                properties:
                  implants:
                    type: array
                    description: This will be empty
                  errors:
                    type: array
                    items:
                      type: string
  /implants/{implantId}:
    delete:
      security:
        - jwt: [Admin]
      summary: Deletes an implant record.
      tags:
        - Implants
      parameters:
        - in: path
          name: implantId
          schema:
            type: string
          required: true
          description: Identifier of the implant to delete.
      responses:
        "200":
          description: Successfully deleted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
        "403":
          description: User not logged in, or not an admin.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
        "500":
          description: Server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
# TASKS
  /tasks/{implantId}:
    get:
      security:
        - jwt: [Read]
      summary: Retrieves tasks for the given implant. Requires read access to the implant.
      tags:
        - Tasks
        - Implants
      parameters:
        - in: path
          name: implantId
          schema:
            type: string
          required: true
          description: Identifier of the implant to find tasks from.
      responses:
        "200": # status code
          description: Tasks.
          content:
            application/json:
              schema:
                type: object
                properties:
                  tasks:
                    type: array
                    description: Tasks for the implant
                    items:
                      $ref: "#/components/schemas/taskdb"
                  errors:
                    type: array
                    items:
                      type: string
        "403": # status code
          description: User not logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
        "500": # status code
          description: An unexpected server-side error
          content:
            application/json:
              schema:
                type: object
                properties:
                  implants:
                    type: array
                    description: This will be empty
                  errors:
                    type: array
                    items:
                      type: string
  /task-types:
    get:
      security:
        - jwt: [Read]
      summary: Retrieves the list of all task types
      tags:
        - Tasks
      responses:
        "200": # status code
          description: Task types
          content:
            application/json:
              schema:
                type: object
                properties:
                  taskTypes:
                    type: array
                    description: Task types
                    items:
                      $ref: "#/components/schemas/tasktypedb"
                  errors:
                    type: array
                    items:
                      type: string
        "403": # status code
          description: User not logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
        "500": # status code
          description: An unexpected server-side error
          content:
            application/json:
              schema:
                type: object
                properties:
                  implants:
                    type: array
                    description: This will be empty
                  errors:
                    type: array
                    items:
                      type: string
    post:
      security:
        - jwt: [Admin]
      summary: Creates a new task type
      tags:
        - Tasks
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                taskType:
                  $ref: "#/components/schemas/tasktypecreate"            
      responses:
        "200": # status code
          description: Successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  taskType: 
                    type: object
                    $ref: "#/components/schemas/tasktypedb"
                  errors:
                    type: array
                    items:
                      type: string
        "403": # status code
          description: User not logged in or not an admin
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
        "500": # status code
          description: An unexpected server-side error
          content:
            application/json:
              schema:
                type: object
                properties:
                  taskType:
                    type: object
                    description: This will be empty
                  errors:
                    type: array
                    items:
                      type: string
  /task-types/{taskTypeId}:
    delete:
      security:
        - jwt: [Admin]
      summary: Deletes a task type. Requires admin access.
      tags:
        - Tasks
      parameters:
        - in: path
          name: taskTypeId
          schema:
            type: string
          required: true
          description: Identifier of the task type to delete.
      responses:
        "200": # status code
          description: Successfully deleted (or did not exist in the first place)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
        "403": # status code
          description: User not logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
        "500": # status code
          description: An unexpected server-side error
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
  /task-types/param-data-types:
    get:
      security: []
      summary: Gets the list of all the data types that params can use (eg. Number, String)
      tags:
        - Tasks
      responses:
        "200":
          description: The list of data types
          content:
            application/json:
              schema: 
                type: array
                items:
                  type: string
  /tasks: 
    post: 
      security:
        - jwt: [Operator]
      summary: Creates or edits a task. Requires operator access to the implant.
      tags:
        - Tasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/taskreq"
      responses:
        "200": # status code
          description: Successfully created/updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
        "400": # status code
          description: Improperly-formatted task
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
        "403": # status code
          description: User not logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
        "500": # status code
          description: An unexpected server-side error
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
  /tasks/{taskId}: 
    delete: 
      security:
        - jwt: [Operator]
      summary: Deletes a task. Requires operator access to the implant.
      tags:
        - Tasks
      parameters:
        - in: path
          name: taskId
          schema:
            type: string
          required: true
          description: Identifier of the task to delete.
      responses:
        "200": # status code
          description: Successfully deleted (or did not exist in the first place)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
        "400": # status code
          description: Task has already been sent to an implant
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
        "403": # status code
          description: User not logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
        "500": # status code
          description: An unexpected server-side error
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
# USERS
  /users/user/{username}: 
    get: 
      security:
        - jwt: [Read]
      summary: Gets the details (minus hashed password) of the user, if they exist.
      tags:
        - Users
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: Name of the user to find.
      responses:
        "200": # status code
          description: Successfully found user
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
        "400": # status code
          description: Provided username does not correspond to a user
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
        "403": # status code
          description: Calling user not logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
  /users/user/{userId}: 
    delete: 
      security:
        - jwt: [Admin]
      summary: Ensures a user does not exist in the database. Requires admin access. Does not work when auth is not DB-backed.
      tags:
        - Users
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: Identifier of the user to delete.
      responses:
        "200": # status code
          description: User deleted or did not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
        "403": # status code
          description: Calling user not logged in or not an admin.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
        "500": # status code
          description: Server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
  /users/whoami:
    get:
      security:
        - jwt: [Read]
      summary: Checks the token for the user, and returns their details.
      tags:
        - Users
      responses:
        "200": # status code
          description: User is logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  user: 
                    type: object
                    properties:
                      id: 
                        type: string
                      name:
                        type: string
                      isAdmin:
                        type: boolean
                  errors:
                    type: array
                    items:
                      type: string
        "401": # status code
          description: User is not logged in.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
        "500": # status code
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string

      
